#!/bin/bash

# Set the API base URL
API_BASE="http://localhost:8000/api"

# Get a fresh authentication token
echo "Getting authentication token..."
TOKEN_RESPONSE=$(curl -s -X POST "${API_BASE}/auth/login" \
  -F "username=admin@doztra.ai" \
  -F "password=AdminPassword123!")

# Extract the token from the response
AUTH_TOKEN=$(echo $TOKEN_RESPONSE | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)

if [ -z "$AUTH_TOKEN" ]; then
  echo "Failed to get authentication token. Response:"
  echo "$TOKEN_RESPONSE"
  exit 1
fi

echo "Authentication token obtained successfully."

# Create a new test project
echo "Creating a test project..."
PROJECT_RESPONSE=$(curl -s -X POST "${API_BASE}/research/projects/" \
  -H "Authorization: Bearer $AUTH_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Test Save Changes Project",
    "description": "A test project to verify the save changes functionality",
    "type": "technical_report",
    "metadata": {
      "academic_level": "masters",
      "target_audience": "software_engineers",
      "research_methodology": "design_science",
      "discipline": "computer_science",
      "country": "global",
      "keywords": ["testing", "api", "content-editing"]
    }
  }')

# Extract the project ID from the response
PROJECT_ID=$(echo $PROJECT_RESPONSE | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)

if [ -z "$PROJECT_ID" ]; then
  echo "Failed to create a project. Response:"
  echo "$PROJECT_RESPONSE"
  exit 1
fi

echo "Created test project with ID: $PROJECT_ID"

# Generate content for a section
echo "Generating content for the 'Introduction' section..."
CONTENT_RESPONSE=$(curl -s -X POST "${API_BASE}/research/content/generate-section" \
  -H "Authorization: Bearer $AUTH_TOKEN" \
  -H "Content-Type: application/json" \
  -d "{
    \"project_id\": \"$PROJECT_ID\",
    \"section_title\": \"Introduction\",
    \"context\": \"This is a test introduction for our save changes functionality.\"
  }")

# Check if content generation was successful
if ! echo "$CONTENT_RESPONSE" | grep -q "content"; then
  echo "Content generation failed. Response:"
  echo "$CONTENT_RESPONSE"
  exit 1
fi

echo "Content generated successfully."
echo "Preview of generated content:"
ORIGINAL_CONTENT=$(echo "$CONTENT_RESPONSE" | grep -o '"content":"[^"]*"' | sed 's/"content":"\(.*\)"/\1/' | head -5 | sed 's/\\n/\n/g')
echo "$ORIGINAL_CONTENT"

# Now let's test updating the content using the new endpoint
echo -e "\nTesting update content by section title..."
# Encode the content for JSON
UPDATED_CONTENT=$(cat <<EOF
# Updated Introduction

This content has been manually edited using the Save Changes functionality.

## Key Points
- The content was originally generated by AI
- It has now been updated via the API
- This demonstrates the save changes functionality working correctly
## Next Steps
We can now integrate this with the frontend to provide a seamless editing experience.
EOF
)

# Create a JSON file for the request body
cat > update_request.json << EOF
{
  "content": $(jq -Rs . <<< "$UPDATED_CONTENT"),
  "content_metadata": {
    "edited_via": "test_script",
    "edit_timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  }
}
EOF

# Use the JSON file in the curl command
UPDATE_RESPONSE=$(curl -s -X PUT "${API_BASE}/research/content/projects/$PROJECT_ID/content/section/Introduction" \
  -H "Authorization: Bearer $AUTH_TOKEN" \
  -H "Content-Type: application/json" \
  -d @update_request.json)

# Check if update was successful
if echo "$UPDATE_RESPONSE" | grep -q "content"; then
  echo "Content updated successfully!"
  echo "Preview of updated content:"
  echo "$UPDATED_CONTENT_RESPONSE"
  
  # Check if version was incremented
  VERSION=$(echo "$UPDATE_RESPONSE" | grep -o '"version":[0-9]*' | cut -d':' -f2)
  echo "New content version: $VERSION"
else
  echo "Content update failed. Response:"
  echo "$UPDATE_RESPONSE"
fi

# Retrieve the content to verify it was saved
echo -e "\nVerifying saved content..."
GET_RESPONSE=$(curl -s -X GET "${API_BASE}/research/content/projects/$PROJECT_ID/content/Introduction" \
  -H "Authorization: Bearer $AUTH_TOKEN")

if echo "$GET_RESPONSE" | grep -q "content"; then
  echo "Content retrieved successfully!"
  echo "Preview of retrieved content:"
  RETRIEVED_CONTENT=$(echo "$GET_RESPONSE" | grep -o '"content":"[^"]*"' | sed 's/"content":"\(.*\)"/\1/' | head -5 | sed 's/\\n/\n/g')
  echo "$RETRIEVED_CONTENT"
  
  # Check if content matches what we updated it to
  if [[ "$RETRIEVED_CONTENT" == *"manually edited"* ]]; then
    echo "✅ Test passed: Content was successfully updated and retrieved!"
  else
    echo "❌ Test failed: Retrieved content does not match updated content."
  fi
else
  echo "Failed to retrieve content. Response:"
  echo "$GET_RESPONSE"
fi

echo "Done!"

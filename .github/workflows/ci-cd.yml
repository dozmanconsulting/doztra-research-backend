# name: Doztra Auth Service CI/CD

# on:
#   push:
#     branches: [ main, dev ]
#   pull_request:
#     branches: [ main, dev ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_DB: doztra_auth_test
#         ports:
#           - 5432:5432
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#     - uses: actions/checkout@v3
    
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.10'
        
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install flake8 pytest pytest-cov mypy black isort
#         pip install -r requirements.txt
        
#     - name: Lint with flake8
#       run: |
#         flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
#         flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
#     - name: Check formatting with black
#       run: |
#         black --check app tests
        
#     - name: Check imports with isort
#       run: |
#         isort --check-only --profile black app tests
        
#     - name: Type check with mypy
#       run: |
#         mypy app tests --ignore-missing-imports
        
#     - name: Run migrations
#       env:
#         DATABASE_URL: postgresql://postgres:postgres@localhost:5432/doztra_auth_test
#       run: |
#         alembic upgrade head
        
#     - name: Run unit tests
#       env:
#         DATABASE_URL: postgresql://postgres:postgres@localhost:5432/doztra_auth_test
#         SECRET_KEY: test_secret_key
#       run: |
#         pytest tests/unit --cov=app --cov-report=xml
        
#     - name: Upload coverage to Codecov
#       uses: codecov/codecov-action@v3
#       with:
#         file: ./coverage.xml
#         fail_ci_if_error: false

#   build-and-push:
#     needs: test
#     if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
#     runs-on: ubuntu-latest
    
#     steps:
#     - uses: actions/checkout@v3
    
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v2
      
#     - name: Login to DockerHub
#       uses: docker/login-action@v2
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_TOKEN }}
        
#     - name: Build and push
#       uses: docker/build-push-action@v4
#       with:
#         context: .
#         push: true
#         tags: |
#           doztra/auth-service:latest
#           doztra/auth-service:${{ github.sha }}
#         cache-from: type=registry,ref=doztra/auth-service:buildcache
#         cache-to: type=registry,ref=doztra/auth-service:buildcache,mode=max

#   deploy-dev:
#     needs: build-and-push
#     if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Deploy to development environment
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.DEV_HOST }}
#         username: ${{ secrets.DEV_USERNAME }}
#         key: ${{ secrets.DEV_SSH_KEY }}
#         script: |
#           cd /opt/doztra/auth-service
#           docker-compose pull
#           docker-compose up -d
#           docker system prune -af

#   deploy-prod:
#     needs: build-and-push
#     if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#     runs-on: ubuntu-latest
#     environment: production
    
#     steps:
#     - name: Deploy to production environment
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.PROD_HOST }}
#         username: ${{ secrets.PROD_USERNAME }}
#         key: ${{ secrets.PROD_SSH_KEY }}
#         script: |
#           cd /opt/doztra/auth-service
#           docker-compose pull
#           docker-compose up -d
#           docker system prune -af
